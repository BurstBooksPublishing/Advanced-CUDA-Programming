#include 
#include 

__global__ void advancedKernel(int *data, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N) {
        // Perform some computation
        data[idx] = data[idx] * 2;
        // Simulate a potential bug for debugging
        if (idx == N / 2) {
            data[idx] = data[idx] / 0; // Intentional division by zero
        }
    }
}

int main() {
    int N = 1024;
    int *h_data = (int *)malloc(N * sizeof(int));
    int *d_data;
    cudaMalloc(&d_data, N * sizeof(int));

    // Initialize host data
    for (int i = 0; i < N; i++) {
        h_data[i] = i;
    }

    // Copy data to device
    cudaMemcpy(d_data, h_data, N * sizeof(int), cudaMemcpyHostToDevice);

    // Launch kernel
    advancedKernel<<<(N + 255) / 256, 256>>>(d_data, N);

    // Copy data back to host
    cudaMemcpy(h_data, d_data, N * sizeof(int), cudaMemcpyDeviceToHost);

    // Print results
    for (int i = 0; i < N; i++) {
        printf("%d ", h_data[i]);
    }

    // Free memory
    free(h_data);
    cudaFree(d_data);

    return 0;
}