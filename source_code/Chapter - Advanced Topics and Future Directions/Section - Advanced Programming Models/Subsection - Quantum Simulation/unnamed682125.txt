#include <cuda_runtime.h>
#include <stdio.h>

// Kernel to simulate quantum state evolution
__global__ void quantumSimulation(float *state, float *hamiltonian, 
                                  float *result, int n) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        float sum = 0.0f;
        for (int i = 0; i < n; i++) {
            sum += hamiltonian[idx * n + i] * state[i];
        }
        result[idx] = sum;
    }
}

int main() {
    int n = 1024; // Size of the quantum state vector
    size_t size = n * sizeof(float);

    // Allocate host memory
    float *h_state = (float *)malloc(size);
    float *h_hamiltonian = (float *)malloc(size * n);
    float *h_result = (float *)malloc(size);

    // Initialize host arrays
    for (int i = 0; i < n; i++) {
        h_state[i] = 1.0f / n; // Uniform initial state
        for (int j = 0; j < n; j++) {
            h_hamiltonian[i * n + j] = (i == j) ? 1.0f : 0.1f; // Simple Hamiltonian
        }
    }

    // Allocate device memory
    float *d_state, *d_hamiltonian, *d_result;
    cudaMalloc(&d_state, size);
    cudaMalloc(&d_hamiltonian, size * n);
    cudaMalloc(&d_result, size);

    // Copy data to device
    cudaMemcpy(d_state, h_state, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_hamiltonian, h_hamiltonian, size * n, cudaMemcpyHostToDevice);

    // Launch kernel
    int threadsPerBlock = 256;
    int blocksPerGrid = (n + threadsPerBlock - 1) / threadsPerBlock;
    quantumSimulation<<<blocksPerGrid, threadsPerBlock>>>(d_state, d_hamiltonian, d_result, n);

    // Copy result back to host
    cudaMemcpy(h_result, d_result, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_state);
    cudaFree(d_hamiltonian);
    cudaFree(d_result);

    // Free host memory
    free(h_state);
    free(h_hamiltonian);
    free(h_result);

    return 0;
}