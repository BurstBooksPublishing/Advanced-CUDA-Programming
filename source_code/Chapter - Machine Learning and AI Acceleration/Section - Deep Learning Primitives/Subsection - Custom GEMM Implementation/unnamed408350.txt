__global__ void customGEMM(float* A, float* B, float* C, int M, int N, int K) {
    // Compute row and column index of the output element
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    // Ensure the thread is within the bounds of the output matrix
    if (row < M && col < N) {
        float sum = 0.0f;

        // Perform the dot product of the row of A and column of B
        for (int i = 0; i < K; ++i) {
            sum += A[row * K + i] * B[i * N + col];
        }

        // Store the result in the output matrix
        C[row * N + col] = sum;
    }
}

void launchCustomGEMM(float* A, float* B, float* C, int M, int N, int K) {
    // Define block and grid dimensions
    dim3 blockDim(16, 16);
    dim3 gridDim((N + blockDim.x - 1) / blockDim.x, 
                  (M + blockDim.y - 1) / blockDim.y);

    // Launch the custom GEMM kernel
    customGEMM<<>>(A, B, C, M, N, K);
}