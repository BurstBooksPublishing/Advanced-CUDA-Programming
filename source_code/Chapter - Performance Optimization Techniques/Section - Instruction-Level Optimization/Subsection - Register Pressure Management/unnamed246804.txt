__global__ void reduceSum(int *input, int *output, int n) {
    extern __shared__ int sdata[];

    // Calculate thread ID and stride
    unsigned int tid = threadIdx.x;
    unsigned int i = blockIdx.x * blockDim.x + threadIdx.x;

    // Load input into shared memory
    sdata[tid] = (i < n) ? input[i] : 0;
    __syncthreads();

    // Perform reduction in shared memory
    for (unsigned int s = blockDim.x / 2; s > 0; s >>= 1) {
        if (tid < s) {
            sdata[tid] += sdata[tid + s];
        }
        __syncthreads();
    }

    // Write the result of this block to the output array
    if (tid == 0) {
        output[blockIdx.x] = sdata[0];
    }
}