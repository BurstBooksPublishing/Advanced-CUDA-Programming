// Advanced CUDA code demonstrating CPU-GPU synchronization
#include <cuda_runtime.h>
#include <iostream>

__global__ void kernel(int *data, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N) {
        data[idx] = idx * 2; // Simple computation
    }
}

int main() {
    int N = 1024;
    int *h_data = (int *)malloc(N * sizeof(int));
    int *d_data;
    cudaMalloc(&d_data, N * sizeof(int));

    // Launch kernel with 1 block and N threads
    kernel<<<1, N>>>(d_data, N);

    // Synchronize CPU and GPU to ensure kernel completion
    cudaDeviceSynchronize();

    // Copy data back to host
    cudaMemcpy(h_data, d_data, N * sizeof(int), cudaMemcpyDeviceToHost);

    // Verify results
    for (int i = 0; i < N; ++i) {
        if (h_data[i] != i * 2) {
            std::cerr << "Error at index " << i << std::endl;
            break;
        }
    }

    // Cleanup
    free(h_data);
    cudaFree(d_data);

    return 0;
}