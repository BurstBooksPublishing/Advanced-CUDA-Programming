#include 
#include 

__global__ void kernel(int *data, int value) {
    int idx = threadIdx.x + blockIdx.x * blockDim.x;
    data[idx] = value;
}

int main() {
    const int N = 1024;
    int *d_data1, *d_data2;
    cudaStream_t stream1, stream2;
    cudaEvent_t event;

    // Allocate memory on the device
    cudaMalloc(&d_data1, N * sizeof(int));
    cudaMalloc(&d_data2, N * sizeof(int));

    // Create streams and an event
    cudaStreamCreate(&stream1);
    cudaStreamCreate(&stream2);
    cudaEventCreate(&event);

    // Launch kernel in stream1
    kernel<<<1, N, 0, stream1>>>(d_data1, 1);

    // Record an event after stream1 completes
    cudaEventRecord(event, stream1);

    // Launch kernel in stream2, waiting for event from stream1
    cudaStreamWaitEvent(stream2, event, 0);
    kernel<<<1, N, 0, stream2>>>(d_data2, 2);

    // Synchronize streams to ensure completion
    cudaStreamSynchronize(stream1);
    cudaStreamSynchronize(stream2);

    // Clean up
    cudaFree(d_data1);
    cudaFree(d_data2);
    cudaStreamDestroy(stream1);
    cudaStreamDestroy(stream2);
    cudaEventDestroy(event);

    return 0;
}