// CUDA C++ code optimizing memory access patterns for memory-bound kernels

__global__ void optimizedMemoryAccess(float* A, float* B, float* C, int N) {
    // Calculate global thread index
    int idx = blockIdx.x * blockDim.x + threadIdx.x;

    // Ensure the thread index is within bounds
    if (idx < N) {
        // Use shared memory to coalesce global memory accesses
        __shared__ float shared_A[256];
        __shared__ float shared_B[256];

        // Load data into shared memory
        shared_A[threadIdx.x] = A[idx];
        shared_B[threadIdx.x] = B[idx];

        // Synchronize to ensure all threads have loaded data
        __syncthreads();

        // Perform computation using shared memory
        C[idx] = shared_A[threadIdx.x] + shared_B[threadIdx.x];
    }
}

int main() {
    int N = 1 << 20; // Array size
    size_t size = N * sizeof(float);

    // Allocate host memory
    float *h_A = (float*)malloc(size);
    float *h_B = (float*)malloc(size);
    float *h_C = (float*)malloc(size);

    // Initialize host arrays
    for (int i = 0; i < N; i++) {
        h_A[i] = 1.0f;
        h_B[i] = 2.0f;
    }

    // Allocate device memory
    float *d_A, *d_B, *d_C;
    cudaMalloc(&d_A, size);
    cudaMalloc(&d_B, size);
    cudaMalloc(&d_C, size);

    // Copy data to device
    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);

    // Define block and grid dimensions
    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;

    // Launch kernel with optimized memory access pattern
    optimizedMemoryAccess<<>>(d_A, d_B, d_C, N);

    // Copy result back to host
    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    // Free host memory
    free(h_A);
    free(h_B);
    free(h_C);

    return 0;
}