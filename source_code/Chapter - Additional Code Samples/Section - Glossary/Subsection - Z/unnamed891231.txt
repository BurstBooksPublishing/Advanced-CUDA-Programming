#include 
#include 
#include 

__global__ void complexKernel(int *data, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N) {
        // Simulate a complex operation with potential bugs
        data[idx] = data[idx] * 2;  // Intentional bug: should be +=
        if (idx % 2 == 0) {
            data[idx] = data[idx] / 0;  // Division by zero to trigger a fault
        }
    }
}

int main() {
    int N = 1024;
    int *h_data = (int *)malloc(N * sizeof(int));
    int *d_data;
    cudaMalloc((void **)&d_data, N * sizeof(int));

    // Initialize host data
    for (int i = 0; i < N; i++) {
        h_data[i] = i;
    }

    // Copy data to device
    cudaMemcpy(d_data, h_data, N * sizeof(int), cudaMemcpyHostToDevice);

    // Launch kernel with potential bugs
    complexKernel<<<(N + 255) / 256, 256>>>(d_data, N);

    // Copy data back to host
    cudaMemcpy(h_data, d_data, N * sizeof(int), cudaMemcpyDeviceToHost);

    // Print results (expecting errors)
    for (int i = 0; i < N; i++) {
        printf("%d ", h_data[i]);
    }

    // Free memory
    free(h_data);
    cudaFree(d_data);

    return 0;
}