#include 
#include 

// Kernel to be launched dynamically
__global__ void childKernel(int *data, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N) {
        data[idx] *= 2;  // Double the value at each index
    }
}

// Parent kernel that dynamically launches child kernels
__global__ void parentKernel(int *data, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx == 0) {
        // Dynamically launch child kernel
        childKernel<<<(N + 255) / 256, 256>>>(data, N);
        cudaDeviceSynchronize();  // Ensure child kernel completes
    }
}

int main() {
    const int N = 1024;
    int *h_data = (int *)malloc(N * sizeof(int));
    int *d_data;
    cudaMalloc(&d_data, N * sizeof(int));

    // Initialize host data
    for (int i = 0; i < N; i++) {
        h_data[i] = i;
    }

    // Copy data to device
    cudaMemcpy(d_data, h_data, N * sizeof(int), cudaMemcpyHostToDevice);

    // Launch parent kernel
    parentKernel<<<1, 1>>>(d_data, N);

    // Copy data back to host
    cudaMemcpy(h_data, d_data, N * sizeof(int), cudaMemcpyDeviceToHost);

    // Verify results
    for (int i = 0; i < N; i++) {
        if (h_data[i] != i * 2) {
            printf("Error at index %d: expected %d, got %d\n", i, i * 2, h_data[i]);
            break;
        }
    }

    // Free resources
    free(h_data);
    cudaFree(d_data);

    return 0;
}