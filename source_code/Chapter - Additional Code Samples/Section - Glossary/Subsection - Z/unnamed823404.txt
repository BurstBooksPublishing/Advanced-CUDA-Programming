// CUDA C++ code for Compressed Sparse Row (CSR) format
#include 
#include 

#define N 5  // Size of the matrix

__global__ void spmv_csr_kernel(int *row_ptr, int *col_idx, float *values, 
                                float *x, float *y, int num_rows) {
    int row = blockIdx.x * blockDim.x + threadIdx.x;
    if (row < num_rows) {
        float dot = 0.0f;
        int row_start = row_ptr[row];
        int row_end = row_ptr[row + 1];
        for (int j = row_start; j < row_end; j++) {
            dot += values[j] * x[col_idx[j]];
        }
        y[row] = dot;
    }
}

int main() {
    // Example sparse matrix in CSR format
    int row_ptr[N+1] = {0, 2, 4, 7, 8, 10};
    int col_idx[10] = {0, 1, 1, 2, 0, 2, 3, 1, 0, 4};
    float values[10] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    float x[N] = {1.0, 2.0, 3.0, 4.0, 5.0};
    float y[N] = {0.0};

    // Allocate device memory
    int *d_row_ptr, *d_col_idx;
    float *d_values, *d_x, *d_y;
    cudaMalloc(&d_row_ptr, (N+1) * sizeof(int));
    cudaMalloc(&d_col_idx, 10 * sizeof(int));
    cudaMalloc(&d_values, 10 * sizeof(float));
    cudaMalloc(&d_x, N * sizeof(float));
    cudaMalloc(&d_y, N * sizeof(float));

    // Copy data to device
    cudaMemcpy(d_row_ptr, row_ptr, (N+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col_idx, col_idx, 10 * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_values, values, 10 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, N * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    spmv_csr_kernel<<<1, N>>>(d_row_ptr, d_col_idx, d_values, d_x, d_y, N);

    // Copy result back to host
    cudaMemcpy(y, d_y, N * sizeof(float), cudaMemcpyDeviceToHost);

    // Print result
    for (int i = 0; i < N; i++) {
        std::cout << y[i] << " ";
    }
    std::cout << std::endl;

    // Free device memory
    cudaFree(d_row_ptr);
    cudaFree(d_col_idx);
    cudaFree(d_values);
    cudaFree(d_x);
    cudaFree(d_y);

    return 0;
}