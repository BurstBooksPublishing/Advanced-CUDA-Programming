#include 
#include 

// Custom CUDA event-based profiling tool
class CudaProfiler {
private:
    cudaEvent_t startEvent, stopEvent;
    float elapsedTime;

public:
    CudaProfiler() {
        cudaEventCreate(&startEvent);
        cudaEventCreate(&stopEvent);
        elapsedTime = 0.0f;
    }

    ~CudaProfiler() {
        cudaEventDestroy(startEvent);
        cudaEventDestroy(stopEvent);
    }

    // Start profiling
    void start() {
        cudaEventRecord(startEvent, 0);
    }

    // Stop profiling and calculate elapsed time
    void stop() {
        cudaEventRecord(stopEvent, 0);
        cudaEventSynchronize(stopEvent);
        cudaEventElapsedTime(&elapsedTime, startEvent, stopEvent);
    }

    // Get elapsed time in milliseconds
    float getElapsedTime() const {
        return elapsedTime;
    }
};

// Example kernel to profile
__global__ void vectorAdd(const float* A, const float* B, float* C, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N) {
        C[idx] = A[idx] + B[idx];
    }
}

int main() {
    const int N = 1 << 20; // 1M elements
    size_t size = N * sizeof(float);

    // Allocate host memory
    float *h_A = (float*)malloc(size);
    float *h_B = (float*)malloc(size);
    float *h_C = (float*)malloc(size);

    // Initialize host arrays
    for (int i = 0; i < N; i++) {
        h_A[i] = static_cast(i);
        h_B[i] = static_cast(i * 2);
    }

    // Allocate device memory
    float *d_A, *d_B, *d_C;
    cudaMalloc(&d_A, size);
    cudaMalloc(&d_B, size);
    cudaMalloc(&d_C, size);

    // Copy data to device
    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);

    // Launch kernel with custom profiler
    CudaProfiler profiler;
    profiler.start();
    vectorAdd<<<(N + 255) / 256, 256>>>(d_A, d_B, d_C, N);
    profiler.stop();

    // Copy result back to host
    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);

    // Print elapsed time
    printf("Kernel execution time: %.2f ms\n", profiler.getElapsedTime());

    // Free memory
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);
    free(h_A);
    free(h_B);
    free(h_C);

    return 0;
}