// CUDA C++ code showcasing L2 cache optimization strategies

__global__ void optimizedL2CacheKernel(float* A, float* B, float* C, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;

    // Use shared memory to reduce global memory accesses
    __shared__ float sharedA[256];
    __shared__ float sharedB[256];

    // Load data into shared memory
    if (idx < N) {
        sharedA[threadIdx.x] = A[idx];
        sharedB[threadIdx.x] = B[idx];
    }
    __syncthreads();

    // Perform computation using shared memory
    if (idx < N) {
        C[idx] = sharedA[threadIdx.x] + sharedB[threadIdx.x];
    }

    // Utilize L2 cache by coalescing memory accesses
    for (int i = 0; i < 4; ++i) {
        if (idx + i * blockDim.x < N) {
            C[idx + i * blockDim.x] *= 2.0f;
        }
    }
}

int main() {
    int N = 1 << 20; // 1M elements
    size_t size = N * sizeof(float);

    // Allocate host memory
    float *h_A = (float*)malloc(size);
    float *h_B = (float*)malloc(size);
    float *h_C = (float*)malloc(size);

    // Initialize host arrays
    for (int i = 0; i < N; ++i) {
        h_A[i] = static_cast(i);
        h_B[i] = static_cast(i);
    }

    // Allocate device memory
    float *d_A, *d_B, *d_C;
    cudaMalloc(&d_A, size);
    cudaMalloc(&d_B, size);
    cudaMalloc(&d_C, size);

    // Copy data to device
    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);

    // Launch kernel with optimized L2 cache utilization
    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;
    optimizedL2CacheKernel<<>>(d_A, d_B, d_C, N);

    // Copy result back to host
    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    // Free host memory
    free(h_A);
    free(h_B);
    free(h_C);

    return 0;
}