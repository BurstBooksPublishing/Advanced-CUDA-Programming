#include 
#include 

// Kernel to visualize memory access patterns
__global__ void visualizeMemoryAccess(int *data, int *output, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N) {
        // Simulate memory access pattern
        output[idx] = data[idx] * 2;  // Example computation
    }
}

int main() {
    int N = 1024;  // Number of elements
    size_t size = N * sizeof(int);

    // Allocate host memory
    int *h_data = (int *)malloc(size);
    int *h_output = (int *)malloc(size);

    // Initialize host data
    for (int i = 0; i < N; i++) {
        h_data[i] = i;
    }

    // Allocate device memory
    int *d_data, *d_output;
    cudaMalloc(&d_data, size);
    cudaMalloc(&d_output, size);

    // Copy data to device
    cudaMemcpy(d_data, h_data, size, cudaMemcpyHostToDevice);

    // Launch kernel
    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;
    visualizeMemoryAccess<<>>(d_data, d_output, N);

    // Copy result back to host
    cudaMemcpy(h_output, d_output, size, cudaMemcpyDeviceToHost);

    // Print output to visualize memory access pattern
    for (int i = 0; i < N; i++) {
        printf("%d ", h_output[i]);
    }

    // Free device memory
    cudaFree(d_data);
    cudaFree(d_output);

    // Free host memory
    free(h_data);
    free(h_output);

    return 0;
}